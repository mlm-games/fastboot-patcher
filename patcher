#!/bin/bash

#####=============== SMALLRAT TOOLBOX ===============#####

VERSION="1.1.0"

function message() {
   case $1 in
   "error") echo "${bold}${red}[patcher.sh](error) => {$2}${normal}" ;;
   "warning") echo "${bold}${yellow}[patcher.sh](warning) => {$2}${normal}" ;;
   "success") echo "${bold}${green}[patcher.sh](success) -> [$2]${normal}" ;;
   "info") echo "[patcher.sh](info) -> [$2]" ;;
   *) return 1 ;;
   esac
}

function existance() {
   if [ -e "$1" ]; then
      found=true && eval "$2"
   else
      found=false && eval "$3"
   fi
}

csd=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)

# Color definitions
normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)

# Main script
set -e
trap 'message error "An error occurred. Exiting."; exit 1' ERR

# Unzip or rename if necessary
existance "$csd/recovery.img.lz4" : :
if [ $found == true ]; then
   message info "Found lz4-zipped image! Unzipping..."
   lz4 -B6 --content-size -f "$csd/recovery.img.lz4" && mv ./recovery.img ./raw.img &&
   message success "Unzipped to raw.img!"
else 
   existance "$csd/recovery.img" : :
   if [ $found == true ]; then
      mv "$csd/recovery.img" "$csd/raw.img" &&
      message success "Found unzipped image!"
   else 
      message error "No image to patch found. Please place recovery.img.lz4 or recovery.img in folder" && exit 1
   fi
fi

# Edit raw image
message info "Editing image..."
off=$(grep -ab -o SEANDROIDENFORCE raw.img | tail -n 1 | cut -d : -f 1)
dd if=raw.img of=header.img bs=4k count="$off" iflag=count_bytes &&
message success "Made edit to image!"

# Make key/signature
existance "$csd/keys" : "mkdir $csd/keys"
message info "Making keyfile..."
existance "$csd/keys/phh.pem" : "openssl genrsa -f4 -out $csd/keys/phh.pem 4096 && message success 'Made phh.pem'"

# Fragment the edited image
existance "$csd/fragments" : "mkdir $csd/fragments"
cd fragments || exit
message warning "Fragmenting image for patching!"
"$csd/magiskboot" unpack "$csd/header.img" &&
"$csd/magiskboot" cpio ramdisk.cpio extract &&
existance "$csd/fragments/system/bin/recovery" "message success 'Successfully fragmented image!'" "message error 'Fragmentation failed!' && exit 1"

# Patch the fragmented image
message warning "Patching fragments (16)"

patches=(
    "e10313aaf40300aa6ecc009420010034 e10313aaf40300aa6ecc0094"
    "eec3009420010034 eec3009420010035"
    "3ad3009420010034 3ad3009420010035"
    "50c0009420010034 50c0009420010035"
    "080109aae80000b4 080109aae80000b5"
    "20f0a6ef38b1681c 20f0a6ef38b9681c"
    "23f03aed38b1681c 23f03aed38b9681c"
    "20f09eef38b1681c 20f09eef38b9681c"
    "26f0ceec30b1681c 26f0ceec30b9681c"
    "24f0fcee30b1681c 24f0fcee30b9681c"
    "27f02eeb30b1681c 27f02eeb30b9681c"
    "b4f082ee28b1701c b4f082ee28b970c1"
    "9ef0f4ec28b1701c 9ef0f4ec28b9701c"
    "9ef00ced28b1701c 9ef00ced28b9701c"
    "2001597ae0000054 2001597ae1000054"
)

for ((i=0; i<${#patches[@]}; i++)); do
    if "$csd/magiskboot" hexpatch system/bin/recovery ${patches[$i]}; then
        message success "Finished patch $((i+1))"
    else
        message warning "Patch $((i+1)) did not apply, continuing..."
    fi
done

"$csd/magiskboot" cpio ramdisk.cpio 'add 0755 system/bin/recovery system/bin/recovery' &&
message success "Successfully finished patch to fragmented image!"

# Reassemble fragmented image
message warning "Attempting to defragment image! If your image is corrupted, this may not end well..."
"$csd/magiskboot" repack "$csd/header.img" "$csd/output.img"
existance "$csd/output.img" "message success 'Assembled output.img!' && cd $csd" "message error 'Failed to assemble image!' && exit 1"

# Sign patched image with keyfile
echo "extracting public key to phh.pub.bin..."
if python3 $csd/avbtool extract_public_key --key $csd/keys/phh.pem --output $csd/keys/phh.pub.bin; then
    echo "signing patched image with key..."
    if python3 $csd/avbtool add_hash_footer --image $csd/output/output.img --partition_name recovery --partition_size $(wc -c $csd/raw.img | cut -f 1 -d ' ') --key $csd/keys/phh.pem --algorithm SHA256_RSA4096; then
        echo "signed image successfully!"
    else
        echo "Error signing image"
        exit 1
    fi
else
    echo "Error extracting public key"
    exit 1
fi

# Package image for use in Odin
message info "Packaging image for Odin..."
mv "$csd/output.img" "$csd/recovery.img"
tar -H ustar -c recovery.img > "$csd/output.tar"
# Should not be needed for odin4
# md5sum -t "$csd/output.tar" >> "$csd/output.tar"
# mv "$csd/output.tar" "$csd/output.tar.md5"
message success "Successfully packaged recovery.img -> output.tar"
